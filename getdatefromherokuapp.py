# -*- coding: utf-8 -*-
"""GetDateFromHerokuApp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BxARKZSr30CilWlLIgHg6JxrwmirFMnr

# connect Heroku DataBase
"""

import psycopg2
from psycopg2 import Error

connection = psycopg2.connect(user = "",
                              password = "",
                              host = "",
                              port = "",
                              database = "fkjd;sklfjlemto")

cursor = connection.cursor()

cursor

sql = "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'Salesforce.Opportunity';"
cursor.execute(sql)
results = cursor.fetchall()
for result in results:
    print(result)

"""CREATE TABLE accounts (
user_id serial PRIMARY KEY,
username VARCHAR ( 50 ) UNIQUE NOT NULL,
password VARCHAR ( 50 ) NOT NULL,
email VARCHAR ( 255 ) UNIQUE NOT NULL,
created_on TIMESTAMP NOT NULL,
    last_login TIMESTAMP 
);

# load data from salesforce
"""

cursor.execute("select id from Salesforce.Opportunity")

Opportunitys = cursor.fetchall()
for Opportunity in Opportunitys:
    print(Opportunity)

connection.commit()
connection.close()

!pip install simple_salesforce
!pip install kmodes

"""# cluster"""

# -*- coding: utf-8 -*-
"""connet two salesforce account.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nKsTQUnYhOACMw3gB4Zvz2rxbny4dlz9

## 下載simple_salesforce
"""



"""## 連線到salesforce"""


import pandas as pd
import json
from simple_salesforce import Salesforce, SalesforceLogin, SFType
import datetime

loginInfo = {
    'username':'sayou1223@gmail.com',
    'password':'Ms19970825',
    'security_token':'F4ba166dlr7iqNmZ9UxUtBPaa'
}
username = loginInfo['username']
password = loginInfo['password']
security_token = loginInfo['security_token']
domain = 'login'

session_id, instance = SalesforceLogin(username=username, password=password, security_token=security_token, domain=domain)
sf = Salesforce(instance=instance, session_id=session_id)

"""## Query Account"""

#querySOQL = """SELECT Id, Name, Type, Industry FROM Account WHERE Id = '0015j00000VWFJ7AAP'"""
querySOQL = """SELECT Id, Name, Type, Industry FROM Account"""
response = sf.query_all(querySOQL)
listAccoountrecord = response.get('records')
df_Account = pd.DataFrame(listAccoountrecord).drop(columns='attributes')

df_Account.rename(columns = {'Id': 'AccountId', 'Name': 'AccName'}, inplace=True)

df_Account

"""## Query Opp"""

#querySOQL2 = "SELECT OrderNumber , TotalAmount, AccountId, Status, Id FROM Order WHERE Id='8015j0000004WfuAAE'"
querySOQL2 = "SELECT Id, Name, StageName, AccountId FROM Opportunity"

Opp = sf.query_all(querySOQL2)
list_o_record = Opp.get('records')
df_Opp = pd.DataFrame(list_o_record).drop(columns='attributes')

df_Opp.rename(columns = {'Id': 'OppId', 'Name': 'OppName'}, inplace=True)

df_Opp

"""## Query OPP Product"""

querySOQL3 = "SELECT Product2Id, OpportunityId, Name, Quantity, UnitPrice, TotalPrice FROM OpportunityLineItem"
OppProduct = sf.query_all(querySOQL3)
list_op_record = OppProduct.get('records')
df_OppProduct = pd.DataFrame(list_op_record).drop(columns='attributes')

df_OppProduct.rename(columns = {'Name': 'OPP P Name'}, inplace=True)

df_OppProduct

"""## Query Product"""

querySOQL4 = "SELECT Name, ProductCode, Id FROM Product2"
product = sf.query_all(querySOQL4)
list_product_record = product.get('records')
df_product = pd.DataFrame(list_product_record).drop(columns='attributes')

df_product.rename(columns ={'Id':'Product2Id','Name':'Product Name'}, inplace=True)

df_product



"""## 資料整合"""

df_Opp_OppP = pd.merge(df_Opp, df_OppProduct, left_on="OppId", right_on="OpportunityId")

df_Opp_OppP

df_Opp_OppP_Prod = pd.merge(df_Opp_OppP, df_product, left_on="Product2Id", right_on="Product2Id")

df_Opp_OppP_Prod

df_Opp_OppP_Prod_Acc = pd.merge(df_Opp_OppP_Prod, df_Account, left_on="AccountId", right_on="AccountId")

df_Opp_OppP_Prod_Acc



"""## Kprototype"""


import numpy as np
import pandas as pd
from kmodes.kprototypes import KPrototypes

df_Opp_OppP_Prod_Acc

df_Opp_OppP_Prod_Acc_drop = df_Opp_OppP_Prod_Acc.drop(['OppName','OppId','OpportunityId','OPP P Name','StageName','Type','Industry'],axis=1)

df_Opp_OppP_Prod_Acc_drop= df_Opp_OppP_Prod_Acc_drop.values

df_Opp_OppP_Prod_Acc_drop

df_Opp_OppP_Prod_Acc_drop[:, 2] = df_Opp_OppP_Prod_Acc_drop[:, 2].astype(float)
df_Opp_OppP_Prod_Acc_drop[:, 3] = df_Opp_OppP_Prod_Acc_drop[:, 3].astype(float)
df_Opp_OppP_Prod_Acc_drop[:, 4] = df_Opp_OppP_Prod_Acc_drop[:, 4].astype(float)

df_Opp_OppP_Prod_Acc_drop

kproto = KPrototypes(n_clusters=3, verbose=2,max_iter=20)
clusters = kproto.fit_predict(df_Opp_OppP_Prod_Acc_drop, categorical=[0, 1, 5, 6, 7])

cluster_dict=[]
for c in clusters:
    cluster_dict.append(int(c))

cluster_dict

df_Opp_OppP_Prod_Acc['cluster']= cluster_dict

df_Opp_OppP_Prod_Acc

df_Opp_OppP_Prod_Acc[df_Opp_OppP_Prod_Acc['cluster']== 0]

df_Opp_OppP_Prod_Acc[df_Opp_OppP_Prod_Acc['cluster']== 1]

df_Opp_OppP_Prod_Acc[df_Opp_OppP_Prod_Acc['cluster']== 2]

# importing pandas as pd
import pandas as pd
from IPython.display import HTML

html = df_Opp_OppP_Prod_Acc.to_html()
  
# write html to file
text_file = open("index.html", "w")
text_file.write(html)
text_file.close()

from tabulate import tabulate
import pandas as pd

print(tabulate(df_Opp_OppP_Prod_Acc, headers='keys', tablefmt='psql'))

"""# Insert Data to Heroku Database"""

len(df_Opp_OppP_Prod_Acc.head(1).columns)

import psycopg2
from psycopg2 import Error

connection = psycopg2.connect(user = "kjuowrgmpagaga",
                              password = "e828d85b1ea495ae035885406453db26c6f455cb44b32ea147fd8c1b2d276be8",
                              host = "ec2-54-80-122-11.compute-1.amazonaws.com",
                              port = "5432",
                              database = "d8r9tpud11emto")

cursor = connection.cursor()

cursor.execute("CREATE TABLE Dopportunity (OppId VARCHAR ( 255 ) UNIQUE,OppName VARCHAR ( 255 ) ,StageName VARCHAR ( 255 ) ,AccountId VARCHAR ( 255 ),Product2Id VARCHAR ( 255 ) ,OpportunityId VARCHAR ( 255 ) ,OPP_P_Name  VARCHAR ( 255 ) ,Quantity INT,UnitPrice INT,TotalPrice INT,Product_Name VARCHAR ( 255 ),ProductCode VARCHAR ( 255 ) ,AccName VARCHAR ( 255 ) ,Type VARCHAR ( 255 ) ,Industry VARCHAR ( 255 ) ,cluster INT); ")

values = list(df_Opp_OppP_Prod_Acc[df_Opp_OppP_Prod_Acc['cluster']== 0].itertuples(index=False, name=None))

 
# executing the sql statement
cursor.executemany("INSERT INTO Dopportunity VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s) ON conflict(OppId) DO NOTHING;", values)
 
# select statement to display output
sql1 = '''select * from Dopportunity;'''
 
# executing sql statement
cursor.execute(sql1)

cursor.fetchall()

connection.commit()
connection.close()

df_Opp_OppP_Prod_Acc[df_Opp_OppP_Prod_Acc['cluster']== 0]

cursor.execute("CREATE TABLE Dopportunity (OppId VARCHAR ( 255 ) UNIQUE,OppName VARCHAR ( 255 ) ,StageName VARCHAR ( 255 ) ,AccountId VARCHAR ( 255 ),Product2Id VARCHAR ( 255 ) ,OpportunityId VARCHAR ( 255 ) ,OPP_P_Name  VARCHAR ( 255 ) ,Quantity INT,UnitPrice INT,TotalPrice INT,Product_Name VARCHAR ( 255 ),ProductCode VARCHAR ( 255 ) ,AccName VARCHAR ( 255 ) ,Type VARCHAR ( 255 ) ,Industry VARCHAR ( 255 ) ,cluster INT); ")

